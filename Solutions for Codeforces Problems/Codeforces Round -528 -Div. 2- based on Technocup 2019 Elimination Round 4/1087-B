//let, div = x / k and, md = x % k, hence div * md = n
//see, md is of the range [1, k - 1], 
//so, the max value of the range that divides n would the value of div.
// next, find div, div = x / k  and md = x % k, so x must be equak to  div *  k + md 

#include <bits/stdc++.h>
using namespace std;
#define optimize              ios_base::sync_with_stdio(false)
#define FOR(i, a, n)          for(int i = a; i < n; i++)
#define from_0_to(x)          for(int i = 0; i < x; i++)

int t, n, N, p, q, r, c, R, C, k,  m, mn = 1e9 + 9, mx = 0, tt, height, width;
long long ans, s;
bool check = false;




int main()
{
    cin.tie(0);
    cout.tie(0);
    optimize;
    //freopen("input.txt", "r", stdin);
    cin >> n >> k;
    if(n < k) {cout << n + k << endl; return 0;}
    for(int i = min(k - 1, n - 1); i >= 1; i--){
        if(n % i != 0) continue;

        int tdiv = n / i;
        cout << tdiv * k + i << endl;
        break;
    }

    return 0;
}
